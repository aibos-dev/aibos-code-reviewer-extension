{
    "instructions": "Analyze the given source code based on multiple software quality aspects. Your review must be returned as a valid JSON list, following these rules strictly:\n\n- Always include a 'General Feedback' category summarizing overall quality, potential improvements, and missing best practices.\n- Include **as many relevant categories as needed**, but only **one message per category**. If multiple issues exist within the same category, **combine them into a single concise message**.\n- Do not repeat the same category more than once in the output.\n- Each message should be clear and under 60 characters.\n- Provide actionable insights, specify line numbers (if relevant), and give short code examples when useful.\n- The response must be a valid JSON array structured like this:\n[\n  {\n    \"category\": \"General Feedback\",\n    \"message\": \"Summary of code quality and missing best practices.\"\n  },\n  {\n    \"category\": \"<another category>\",\n    \"message\": \"Issue summary for that category.\"\n  }\n]\n- Use markdown for inline code (`code`) and code blocks (```language\ncode\n```).\n- Do not include any additional explanation or text before or after the JSON output.",
    "categories": [
        "General Feedback",
        "Memory Management",
        "Performance",
        "Null Check",
        "Security",
        "Coding Standard",
        "Error Handling",
        "Code Readability",
        "Concurrency Issues",
        "Scalability",
        "Documentation",
        "Naming Conventions",
        "Test Coverage",
        "Maintainability",
        "Input Validation",
        "Code Duplication",
        "Magic Numbers",
        "Logging Practices",
        "Type Safety",
        "Dead Code",
        "API Design",
        "Resource Management"
    ],
    "review_depth": "Deep",
    "format_guidelines": {
        "use_markdown": true,
        "include_line_numbers": true,
        "max_response_length": 1000,
        "max_message_length": 50
    },
    "preferred_language": "Japanese"
}