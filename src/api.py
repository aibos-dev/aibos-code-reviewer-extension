"""
API Endpoint Definitions
========================

Uses FastAPI's APIRouter to define endpoints.
/v1/review and /v1/review/feedback are implemented here.
"""

import logging

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from .database import get_db_session
from .llm_engines.ollama_engine import OllamaEngine
from .schemas import ReviewFeedbackRequest, ReviewRequest, ReviewResponse, ReviewResponseCategory
from .services import generate_and_save_review, save_feedback

router = APIRouter(prefix="/v1", tags=["reviews"])
logger = logging.getLogger(__name__)


@router.post("/review", response_model=ReviewResponse)
def review_code(review_req: ReviewRequest, db_session: Session = Depends(get_db_session)) -> ReviewResponse:
    """
    Receives source code and returns a code review generated by the LLM.

    Parameters
    ----------
    review_req : ReviewRequest
        Contains source code, diff, etc.
    db_session : Session
        Database session.

    Returns
    -------
    ReviewResponse
        Includes the newly created review ID and category-wise feedback.
    """
    prompt_str = f"Please review the following {review_req.language} code:\n\n{review_req.sourceCode}\n\nDiff:\n{review_req.diff}"

    try:
        llm_engine = OllamaEngine()  # Instantiate Ollama engine
        review_obj = generate_and_save_review(
            session=db_session,
            llm_engine=llm_engine,
            prompt_str=prompt_str,
            language_str=review_req.language,
            sourcecode_str=review_req.sourceCode,
            diff_str=review_req.diff,
            filename_str=review_req.fileName,
            options_dict=review_req.options,
        )

        # Format the categories for the response
        response_cats = [
            ReviewResponseCategory(category=cat.category_name, message=cat.message) for cat in review_obj.categories
        ]
        return ReviewResponse(reviewId=str(review_obj.review_id), reviews=response_cats)
    except Exception:
        logger.exception("Error occurred while performing code review.")
        raise HTTPException(status_code=500, detail="Failed to perform code review.")


@router.post("/review/feedback")
def review_feedback(feedback_req: ReviewFeedbackRequest, db_session: Session = Depends(get_db_session)) -> dict:
    """
    Allows users to provide feedback (e.g., Good/Bad) for an existing review.

    Parameters
    ----------
    feedback_req : ReviewFeedbackRequest
        Contains the review ID and a list of feedback items.
    db_session : Session
        Database session.

    Returns
    -------
    dict
        Indicates the result of the feedback update.
    """
    try:
        feedback_list = [(f.category, f.feedback) for f in feedback_req.feedbacks]
        save_feedback(db_session, feedback_req.reviewId, feedback_list)
        return {"status": "success", "message": "Feedback saved."}
    except Exception:
        logger.exception("Error occurred while submitting feedback.")
        raise HTTPException(status_code=500, detail="Failed to save feedback.")
